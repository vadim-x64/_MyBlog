@page "{id:guid}"
@model MyBlog.Pages.DetailsModel
@{
    ViewData["Title"] = Model.Post?.Title ?? "Деталі поста";
}

<link rel="stylesheet" href="~/css/details.css">

@if (Model.Post == null)
{
    <div class="alert alert-danger">
        Пост не знайдено.
    </div>
    return;
}

<div class="container1">
    <div class="card mb-4">
        <div class="post-layout">
            <!-- Фото зліва -->
            <div class="post-image-container">
                @if (Model.Post.UseLocalPhoto && Model.Post.LocalPhoto != null)
                {
                    <img src="data:image/png;base64,@Convert.ToBase64String(Model.Post.LocalPhoto)" class="post-image" alt="@Model.Post.Title">
                }
                else if (!string.IsNullOrEmpty(Model.Post.RemotePhotoUrl))
                {
                    <img src="@Model.Post.RemotePhotoUrl" class="post-image" alt="@Model.Post.Title"
                         onerror="this.onerror=null;this.style.display='none';document.getElementById('imageError').style.display='block';">
                    <div id="imageError" class="alert alert-warning" style="display:none;">
                        Неможливо завантажити зображення з вказаного URL.
                    </div>
                }
            </div>

            <!-- Інформація справа -->
            <div class="post-content-container">
                <div class="card-body">
                    <h1 class="card-title">@Model.Post.Title</h1>
                    
                    <!-- Автор -->
                    <div class="d-flex align-items-center mb-3">
                        <a href="/UserProfile/@Model.Post.Author.Id" class="text-decoration-none d-flex align-items-center">
                            @if (Model.Post.Author.Avatar != null)
                            {
                                <img src="data:image/png;base64,@Convert.ToBase64String(Model.Post.Author.Avatar)"
                                     class="rounded-circle me-2" alt="@Model.Post.Author.NickName">
                            }
                            else
                            {
                                <div class="bg-secondary text-white rounded-circle d-flex align-items-center justify-content-center me-2">
                                    <span>@(!string.IsNullOrEmpty(Model.Post.Author.NickName) ? Model.Post.Author.NickName[0].ToString() : "U")</span>
                                </div>
                            }
                            <div>
                                <div class="text-dark">@Model.Post.Author.NickName</div>
                                <small class="text-muted">Створено: @Model.Post.CreatedAt.ToString("dd.MM.yyyy HH:mm")</small>
                                @if (Model.Post.CreatedAt != Model.Post.UpdatedAt)
                                {
                                    <small class="text-muted d-block">Оновлено: @Model.Post.UpdatedAt.ToString("dd.MM.yyyy HH:mm")</small>
                                }
                            </div>
                        </a>
                    </div>
                    
                    <!-- Лайки -->
                    <div class="d-flex align-items-center mb-3">
                        @if (User.Identity?.IsAuthenticated == true)
                        {
                            <button type="button" 
                                    class="like-button @(Model.IsLiked ? "liked" : "")"
                                    onclick="toggleLike('@Model.Post.Id', this)">
                                <span class="like-icon">@(Model.IsLiked ? "❤️" : "🤍")</span>
                                <span class="like-count">@Model.LikesCount</span>
                            </button>
                        }
                        else
                        {
                            <button type="button" 
                                    class="like-button"
                                    onclick="toggleLike('@Model.Post.Id', this)"
                                    title="Увійдіть, щоб поставити лайк">
                                <span class="like-icon">🤍</span>
                                <span class="like-count">@Model.LikesCount</span>
                            </button>
                        }
                    </div>

                    <!-- Опис -->
                    <div class="card-text mt-4">
                        @Html.Raw(Model.Post.Content.Replace("\n", "<br>"))
                    </div>
                </div>
            </div>
        </div>

        <!-- Коментарі залишаються як були -->
        <div class="card-body">
            <hr class="my-4">
            <div class="comments-section">
                @if (User.Identity?.IsAuthenticated == true)
                {
                    <form method="post" class="mb-4" id="mainCommentForm">
                        <div class="form-group">
                            <textarea asp-for="CommentContent" class="form-control" rows="3" placeholder="Залиште ваш коментар..." maxlength="2000"></textarea>
                            <span asp-validation-for="CommentContent" class="text-danger"></span>
                        </div>
                        <button type="submit" class="btn btn-outline-primary mt-2">Додати коментар</button>
                    </form>
                }
                else
                {
                    <div class="alert alert-info mb-4">
                        <a asp-page="/Login" asp-route-returnUrl="@($"/Details/{Model.Post.Id}")">Увійдіть</a> або
                        <a asp-page="/Register" asp-route-returnUrl="@($"/Details/{Model.Post.Id}")">зареєструйтесь</a>,
                        щоб залишити коментар або поставити лайк.
                    </div>
                }

                <div id="comments-container" class="comments-scrollable">
                    @if (Model.Comments.Count == 0)
                    {
                        <div class="text-center py-4">
                            <p class="text-muted">Ще немає коментарів. Будьте першим!</p>
                        </div>
                    }
                    else
                    {
                        <partial name="_CommentsList" model="Model.Comments" />
                    }
                </div>
            </div>

            <div class="modal fade" id="deleteCommentModal" tabindex="-1" aria-labelledby="deleteCommentModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="deleteCommentModalLabel">Підтвердження видалення</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            Ви впевнені, що хочете видалити цей коментар?
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Скасувати</button>
                            <form id="deleteCommentForm" method="post" asp-page-handler="DeleteComment">
                                <input type="hidden" id="commentIdToDelete" name="commentId" value="" />
                                <button type="submit" class="btn btn-danger">Видалити</button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    @Html.AntiForgeryToken()
</div>

@section Scripts {
    <script>
        function createLikeExplosion(button) {
            const explosion = document.createElement('div');
            explosion.className = 'like-explosion';
            button.appendChild(explosion);

            // Створюємо сердечка
            for (let i = 0; i < 6; i++) {
                const heart = document.createElement('div');
                heart.className = 'heart-particle';
                heart.textContent = '❤️';
                
                const angle = (360 / 6) * i + Math.random() * 30;
                const distance = 30 + Math.random() * 20;
                const dx = Math.cos(angle * Math.PI / 180) * distance;
                const dy = Math.sin(angle * Math.PI / 180) * distance;
                
                heart.style.setProperty('--dx', dx + 'px');
                heart.style.setProperty('--dy', dy + 'px');
                heart.style.animationDelay = (i * 0.05) + 's';
                
                explosion.appendChild(heart);
            }

            // Створюємо блискавки
            for (let i = 0; i < 8; i++) {
                const sparkle = document.createElement('div');
                sparkle.className = 'sparkle-particle';
                
                const angle = (360 / 8) * i + Math.random() * 45;
                const distance = 20 + Math.random() * 25;
                const dx = Math.cos(angle * Math.PI / 180) * distance;
                const dy = Math.sin(angle * Math.PI / 180) * distance;
                
                sparkle.style.setProperty('--dx', dx + 'px');
                sparkle.style.setProperty('--dy', dy + 'px');
                sparkle.style.animationDelay = (i * 0.03) + 's';
                
                explosion.appendChild(sparkle);
            }

            setTimeout(() => {
                if (explosion.parentNode) {
                    explosion.parentNode.removeChild(explosion);
                }
            }, 1000);
        }

        function toggleLike(postId, button) {
            const isAuthenticated = @(User.Identity?.IsAuthenticated == true ? "true" : "false");

            if (!isAuthenticated) {
                // Перенаправляємо на сторінку входу з поверненням на поточну сторінку
                window.location.href = '/Login?returnUrl=' + encodeURIComponent(window.location.pathname);
                return;
            }
            
            const formData = new FormData();
            formData.append('postId', postId);
            formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);

            // Додаємо анімацію перед відправкою запиту
            const likeIcon = button.querySelector('.like-icon');
            const wasLiked = likeIcon.textContent === '❤️';
            
            if (!wasLiked) {
                button.classList.add('animating');
                createLikeExplosion(button);
            }

            fetch('/Details/' + postId + '?handler=ToggleLike', {
                method: 'POST',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: formData
            })
                .then(response => response.json())
                .then(data => {
                    const likeCount = button.querySelector('.like-count');

                    setTimeout(() => {
                        likeIcon.textContent = data.isLiked ? '❤️' : '🤍';
                        likeCount.textContent = data.likesCount;

                        if (data.isLiked) {
                            button.classList.add('liked');
                        } else {
                            button.classList.remove('liked');
                        }
                        button.classList.remove('animating');
                    }, 100);
                })
                .catch(error => {
                    console.error('Помилка:', error);
                    button.classList.remove('animating');
                });
        }
    </script>
}